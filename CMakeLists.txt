cmake_minimum_required(VERSION 2.8)
project(NeXus-Streamer)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pedantic-errors")

set(CMAKE_MODULE_PATH
        ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

if(CMAKE_COMPILER_IS_GNUCXX AND COV)
    include(CodeCoverage)
    set(path_to_test_data ${CMAKE_SOURCE_DIR}/data/)
    setup_target_for_coverage(coverage UnitTests coverage "${path_to_test_data}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_COVERAGE}")
endif()

SET(CONAN_PROFILE "default" CACHE STRING "Name of conan profile to use, uses default by default")
set(CONAN "AUTO" CACHE STRING "conan options AUTO (conan must be in path), MANUAL (expects conanbuildinfo.cmake in build directory) or DISABLE")

function(GET_GTEST)
    # download and build gtest and gmock
    if (CMAKE_VERSION VERSION_LESS 3.2)
        set(UPDATE_DISCONNECTED_IF_AVAILABLE "")
    else()
        set(UPDATE_DISCONNECTED_IF_AVAILABLE "UPDATE_DISCONNECTED 1")
    endif()

    include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/DownloadProject.cmake)
    download_project(PROJ                googletest
            GIT_REPOSITORY      https://github.com/google/googletest.git
            GIT_TAG             master
            ${UPDATE_DISCONNECTED_IF_AVAILABLE})

    # Prevent GoogleTest from overriding our compiler/linker options
    # when building with Visual Studio
    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

    add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})

    # When using CMake 2.8.11 or later, header path dependencies
    # are automatically added to the gtest and gmock targets.
    # For earlier CMake versions, we have to explicitly add the
    # required directories to the header search path ourselves.
    if (CMAKE_VERSION VERSION_LESS 2.8.11)
        include_directories("${gtest_SOURCE_DIR}/include"
                "${gmock_SOURCE_DIR}/include")
    endif()
endfunction(GET_GTEST)

if(MSVC)
   GET_GTEST()

  # Use ExternalProject functionality as it already knows how to do clone/update
  include ( ExternalProject )
  set( EXTERNAL_ROOT ${PROJECT_SOURCE_DIR}/external )
  set( THIRD_PARTY_GIT_URL "https://github.com/ScreamingUdder/thirdparty-msvc.git" )
  set ( THIRD_PARTY_GIT_SHA1 master)
  set ( THIRD_PARTY_DIR ${EXTERNAL_ROOT}/src/ThirdParty)
  # Generates a script to do the clone/update in tmp
  set ( _project_name ThirdParty )
  ExternalProject_Add( ${_project_name}
    PREFIX ${EXTERNAL_ROOT}
    GIT_REPOSITORY ${THIRD_PARTY_GIT_URL}
    GIT_TAG ${THIRD_PARTY_GIT_SHA1}
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
    TEST_COMMAND ""
  )
  set_target_properties ( ${_project_name} PROPERTIES
                           EXCLUDE_FROM_DEFAULT_BUILD 1
                           EXCLUDE_FROM_ALL 1)

  # Do fetch/update now as we need the dependencies to configure
  set ( _tmp_dir ${EXTERNAL_ROOT}/tmp )
  if ( NOT EXISTS ${THIRD_PARTY_DIR}/.git )
    message ( STATUS "Fetching third party dependencies" )
    # As of git lfs 1.02 the default 'git checkout' behaviour is very slow for a large amount of data. Running the
    # 'git lfs fetch' command however produces better suitable performance as it downloads everything in parallel.
    # We there for first clone the bare repository containing the data pointers and update them manually
    # see https://github.com/github/git-lfs/issues/376 for more information
    set ( ENV{GIT_LFS_SKIP_SMUDGE} 1 )
    execute_process ( COMMAND ${CMAKE_COMMAND} ARGS -P ${_tmp_dir}/${_project_name}-gitclone.cmake
                      RESULT_VARIABLE error_code )
    if ( error_code )
      message(FATAL_ERROR "Failed to clone repository: '${THIRD_PARTY_GIT_URL}'")
    endif ()
    unset ( ENV{GIT_LFS_SKIP_SMUDGE} )
    # Fetch the binary data
    execute_process ( COMMAND ${GIT_EXECUTABLE} lfs fetch
                      WORKING_DIRECTORY ${THIRD_PARTY_DIR}
                      RESULT_VARIABLE error_code )
    if ( error_code )
      message(FATAL_ERROR "Failed to download third party binary data. Check your network connection")
    endif ()
    # Checkout the data from the index to the working directory
    execute_process ( COMMAND ${GIT_EXECUTABLE} lfs checkout
                      WORKING_DIRECTORY ${THIRD_PARTY_DIR}
                      RESULT_VARIABLE error_code )
  else ()
    message ( STATUS "Updating third party dependencies" )
    # Assume the updates are small & don't run git lfs fetch
    execute_process ( COMMAND ${CMAKE_COMMAND} ARGS -P ${_tmp_dir}/${_project_name}-gitupdate.cmake
                      RESULT_VARIABLE error_code )
    if ( error_code )
      message(FATAL_ERROR "Failed to update repository: '${THIRD_PARTY_GIT_URL}'")
    endif ()
  endif ()
  unset ( _tmp_dir )

  set ( THIRD_PARTY_BIN "${THIRD_PARTY_DIR}/bin;" )
  message ( STATUS "Third party dependencies are in ${THIRD_PARTY_DIR}" )
  # Add to the path so that cmake can configure correctly without the user having to do it
  set ( ENV{PATH} "${THIRD_PARTY_BIN};$ENV{PATH}" )

  # TreatWChar_tAsBuiltInType: true == /Zc:wchar_t  false == /Zc:wchar_t-
  set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:wchar_t-" )

  set(CMAKE_MODULE_PATH
         ${CMAKE_MODULE_PATH} ${THIRD_PARTY_DIR}/cmake)
else()

    if(${CONAN} MATCHES "AUTO")
        include(${CMAKE_MODULE_PATH}/conan.cmake)
        conan_cmake_run(CONANFILE conan/conanfile.txt
                PROFILE ${CONAN_PROFILE}
                BASIC_SETUP
                BUILD_TYPE "None"
                BUILD outdated)
    elseif(${CONAN} MATCHES "MANUAL")
        if(EXISTS "${CMAKE_BINARY_DIR}/conanbuildinfo.cmake")
            include("${CMAKE_BINARY_DIR}/conanbuildinfo.cmake")
            conan_basic_setup()
        else()
            MESSAGE(FATAL_ERROR "CONAN set to MANUAL but no file named conanbuildinfo.cmake found in build directory")
        endif()
    elseif(NOT ${CONAN} MATCHES "DISABLE")
        MESSAGE(FATAL_ERROR "Unrecognised option for CONAN, use AUTO, MANUAL or DISABLE")
    endif()

    if(${CONAN} MATCHES "DISABLE")
        GET_GTEST()
    endif()

endif()

find_package(HDF5 COMPONENTS CXX HL REQUIRED)
find_package(LibRDKafka)

include(CTest)
enable_testing()

#####################
## Doxygen         ##
#####################

# add a target to generate API documentation with Doxygen
find_package(Doxygen)
if(DOXYGEN_FOUND)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
    add_custom_target(doc
            ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
            COMMENT "Generating API documentation with Doxygen" VERBATIM
            )
endif(DOXYGEN_FOUND)


####################
## Add subdirs    ##
####################

add_subdirectory("${PROJECT_SOURCE_DIR}/event_data")
add_subdirectory("${PROJECT_SOURCE_DIR}/nexus_producer")
add_subdirectory("${PROJECT_SOURCE_DIR}/nexus_file_reader")

####################
## Unit tests     ##
####################

include_directories(
        ${HDF5_INCLUDE_DIRS}
        ${LibRDKafka_INCLUDE_DIR}
        ${PROJECT_SOURCE_DIR}/nexus_producer/include
        ${PROJECT_SOURCE_DIR}/event_data/include
        ${PROJECT_SOURCE_DIR}/nexus_file_reader/include)

file(GLOB TEST_SRC_FILES
        ${PROJECT_SOURCE_DIR}/nexus_producer/test/*.cpp
        ${PROJECT_SOURCE_DIR}/event_data/test/*.cpp
        ${PROJECT_SOURCE_DIR}/nexus_file_reader/test/*.cpp
        unitTestRunner.cpp)

add_executable(UnitTests ${TEST_SRC_FILES})

target_link_libraries(UnitTests
        gtest
        gmock
        producerUnitTests
        eventDataUnitTests
        fileReaderUnitTests)

# Make the tests available to run through ctest
# Do "ctest -VV" in the build directory
add_test(NAME all_tests COMMAND UnitTests "${PROJECT_SOURCE_DIR}/data/")
